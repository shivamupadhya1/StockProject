package com.stock.in.service;

import com.stock.in.dto.StockDTO;
import com.stock.in.exception.StockException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import yahoofinance.Stock;
import yahoofinance.YahooFinance;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

@Slf4j
@Service
public class StockService {
    private static final String STOCK_SYMBOL = "^DJI";
    private final Queue<StockDTO> stockQueue = new LinkedList<>();

    @Scheduled(fixedRate = 5000)
    public void fetchStockPrice() {
        try {
            Stock stock = YahooFinance.get(STOCK_SYMBOL);
            if (stock == null || stock.getQuote().getPrice() == null) {
                throw new StockException("Failed to retrieve stock price");
            }
            StockDTO stockData = new StockDTO(STOCK_SYMBOL, stock.getQuote().getPrice(), LocalDateTime.now());
            stockQueue.add(stockData);

            if (stockQueue.size() > 10) {
                stockQueue.poll();
            }
        } catch (IOException e) {
            throw new StockException("Error fetching stock price: " + e.getMessage());
        }
    }

    public List<StockDTO> getRecentStockPrices() {
        return List.copyOf(stockQueue);
    }
}