package com.stock.in.service;

import com.stock.in.dto.StockDTO;
import com.stock.in.exception.StockException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import yahoofinance.Stock;
import yahoofinance.YahooFinance;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

@Slf4j
@Service
@Scheduled(fixedRate = 5000)
public void fetchStockPrice() {
    try {
        log.info("Fetching stock price for {}", STOCK_SYMBOL);
        Stock stock = YahooFinance.get(STOCK_SYMBOL);

        if (stock == null) {
            log.error("YahooFinance API returned null for {}", STOCK_SYMBOL);
            return;
        }

        BigDecimal price = stock.getQuote().getPrice();
        if (price == null) {
            log.error("YahooFinance API returned null price for {}", STOCK_SYMBOL);
            return;
        }

        log.info("Stock fetched: Symbol={}, Price={}", STOCK_SYMBOL, price);
        stockQueue.add(new StockDTO(STOCK_SYMBOL, price, LocalDateTime.now()));

        if (stockQueue.size() > 10) {
            stockQueue.poll();
        }
    } catch (IOException e) {
        log.error("Error fetching stock price: {}", e.getMessage());
    }


    public List<StockDTO> getRecentStockPrices() {
        List<StockDTO> stocks = List.copyOf(stockQueue);
        log.info("Returning {} stock records", stocks.size());
        return stocks;
    }
}
